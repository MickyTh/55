{'TMP': 'C:\\Users\\itsru\\AppData\\Local\\Temp', 'ONEDRIVECONSUMER': 'C:\\Users\\itsru\\OneDrive', 'COMPUTERNAME': 'DESKTOP-NSODCJL', '_OLD_VIRTUAL_PATH': 'C:\\Python27\\;C:\\Python27\\Scripts;C:\\swigwin-4.0.2;C:\\Users\\itsru\\AppData\\Local\\Microsoft\\WindowsApps;;C:\\Program Files\\JetBrains\\PyCharm Community Edition 2020.2.3\\bin;', 'USERDOMAIN': 'DESKTOP-NSODCJL', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'TERMINAL_EMULATOR': 'JetBrains-JediTerm', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 69 Stepping 1, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '4501', 'PATH': 'C:\\Python27\\lib\\site-packages\\pywin32_system32;C:\\Users\\itsru\\PycharmProjects\\pythonProject\\venv\\Scripts;C:\\Python27\\;C:\\Python27\\Scripts;C:\\swigwin-4.0.2;C:\\Users\\itsru\\AppData\\Local\\Microsoft\\WindowsApps;;C:\\Program Files\\JetBrains\\PyCharm Community Edition 2020.2.3\\bin;', 'SYSTEMROOT': 'C:\\Windows', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'VIRTUAL_ENV': 'C:\\Users\\itsru\\PycharmProjects\\pythonProject\\venv', 'PYCHARM COMMUNITY EDITION': 'C:\\Program Files\\JetBrains\\PyCharm Community Edition 2020.2.3\\bin;', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\itsru\\AppData\\Local', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEPATH': '\\Users\\itsru', 'USERDOMAIN_ROAMINGPROFILE': 'DESKTOP-NSODCJL', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'itsru', 'LOGONSERVER': '\\\\DESKTOP-NSODCJL', 'PROMPT': '(venv) $P$G', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'ONEDRIVE': 'C:\\Users\\itsru\\OneDrive', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'IDEA_INITIAL_DIRECTORY': 'C:\\Users\\itsru\\Desktop', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', '__INTELLIJ_COMMAND_HISTFILE__': 'C:\\Users\\itsru\\AppData\\Roaming\\JetBrains\\PyCharmCE2020.2\\terminal\\history\\history-9', 'WINDIR': 'C:\\Windows', 'TEMP': 'C:\\Users\\itsru\\AppData\\Local\\Temp', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '4', '_OLD_VIRTUAL_PROMPT': '$P$G', 'APPDATA': 'C:\\Users\\itsru\\AppData\\Roaming', 'SYNAPROGDIR': 'Synaptics\\SynTP', 'PROCESSOR_LEVEL': '6', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\itsru'}